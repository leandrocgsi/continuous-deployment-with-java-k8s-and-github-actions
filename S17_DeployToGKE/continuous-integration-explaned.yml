name: Continuous Integration with Github Actions

on:
  push:
    branches:
      - main  # (1) Define o gatilho: executa o workflow em qualquer push na branch 'main'.

jobs:
  build:
    runs-on: ubuntu-latest  # (2) Especifica o sistema operacional onde as ações serão executadas.

    steps:
    - uses: actions/checkout@v3  # (3) Clona o repositório no runner para preparar o código para a build.

    - name: Login to Docker Hub
      uses: docker/login-action@v2.0.0  # (4) Faz login no Docker Hub usando credenciais armazenadas em 'secrets'.
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Login to Google Cloud Platform
      uses: 'google-github-actions/auth@v2'  # (5) Autentica com a GCP usando uma chave de serviço JSON.
      with:
        credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

    - name: Configure Google Cloud SDK Repository
      run: |
        # Atualiza a lista de pacotes no sistema operacional.
        # Isso é necessário para garantir que as informações dos pacotes estejam atualizadas antes de instalar novos softwares.
        sudo apt-get update
        
        # Instala dependências necessárias para adicionar repositórios HTTPS ao sistema.
        # - apt-transport-https: permite que o gerenciador de pacotes use HTTPS para obter pacotes.
        # - ca-certificates: adiciona certificados SSL para conexões seguras.
        # - gnupg: usado para gerenciar chaves GPG e garantir a autenticidade dos pacotes.
        # - curl: ferramenta para transferir dados (neste caso, usada para baixar o arquivo da chave do Google).
        sudo apt-get install -y apt-transport-https ca-certificates gnupg curl
        
        # Baixa a chave pública GPG do Google Cloud SDK.
        # Esta chave é usada para verificar a autenticidade dos pacotes que serão instalados.
        curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | gpg --dearmor > /usr/share/keyrings/cloud.google.gpg
        
        # Adiciona o repositório oficial do Google Cloud SDK à lista de fontes do sistema.
        # - "deb": define o tipo de repositório.
        # - "[signed-by=/usr/share/keyrings/cloud.google.gpg]": garante que apenas pacotes assinados com a chave GPG sejam aceitos.
        # - O repositório contém pacotes para o SDK do Google Cloud.
        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list > /dev/null
        
        # Atualiza novamente a lista de pacotes, agora incluindo os pacotes do repositório do Google Cloud SDK.
        sudo apt-get update


    - name: Install gke-gcloud-auth-plugin
      run: sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin  # (7) Instala o plugin necessário para autenticar no GKE.

    - name: Configure GKE Auth Plugin
      run: echo "export USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV  # (8) Define uma variável de ambiente para usar o plugin do GKE.
   
    - name: Configure GKE Cluster Access
      run: |  # (9) Configura o acesso ao cluster GKE usando as credenciais configuradas.
        gcloud container clusters get-credentials erudio-cluster --region northamerica-northeast1 --project ${{ secrets.PROJECT_ID }}
        
    - name: Set up JDK 21
      uses: actions/setup-java@v3  # (10) Configura o Java 21 para a aplicação e habilita cache do Maven.
      with:
        java-version: '21'
        distribution: 'adopt'
        cache: maven

    - name: Build Application JAR
      working-directory: ./S17_DeployToGKE/rest-with-spring-boot-and-java-erudio
      run: mvn clean package  # (11) Compila o código-fonte da aplicação e gera o arquivo JAR.

    - name: Docker Compose Build
      working-directory: ./S17_DeployToGKE
      run: docker compose build  # (12) Constrói a imagem Docker da aplicação.

    - name: Push to Docker Hub Container Registry
      run: |  # (13) Marca a imagem com tags relevantes e faz push para o Docker Hub.
        docker tag ${{ secrets.DOCKER_USERNAME }}/rest-with-spring-boot-erudio:latest ${{ secrets.DOCKER_USERNAME }}/rest-with-spring-boot-erudio:k8s-${{ github.run_id }}
        docker push ${{ secrets.DOCKER_USERNAME }}/rest-with-spring-boot-erudio:k8s-${{ github.run_id }}
        docker push ${{ secrets.DOCKER_USERNAME }}/rest-with-spring-boot-erudio:latest
    
    - name: Configure Docker authentication for Google Cloud Artifact Registry
      run: gcloud auth configure-docker us-central1-docker.pkg.dev  # (14) Configura o Docker para autenticar com o Artifact Registry.

    - name: Push to Google Cloud Artifact Registry
      run: |  # (15) Marca a imagem novamente e faz push para o Artifact Registry do Google Cloud.
        docker tag ${{ secrets.DOCKER_USERNAME }}/rest-with-spring-boot-erudio:latest ${{ secrets.REGISTRY_INFO }}/rest-with-spring-boot-erudio:latest
        docker tag ${{ secrets.DOCKER_USERNAME }}/rest-with-spring-boot-erudio:latest ${{ secrets.REGISTRY_INFO }}/rest-with-spring-boot-erudio:k8s-${{ github.run_id }}
        docker push ${{ secrets.REGISTRY_INFO }}/rest-with-spring-boot-erudio:latest
        docker push ${{ secrets.REGISTRY_INFO }}/rest-with-spring-boot-erudio:k8s-${{ github.run_id }}

    - name: Deploy to Google Kubernetes Engine (GKE)
      run: |  # (16) Atualiza o deployment no GKE com a nova imagem e monitora a conclusão do rollout.
        kubectl set image deployment rest-with-spring-boot-erudio rest-with-spring-boot-erudio=${{ secrets.REGISTRY_INFO }}/rest-with-spring-boot-erudio:k8s-${{ github.run_id }}
        kubectl rollout status deployment rest-with-spring-boot-erudio
 
    - name: Deploy to Google Cloud Run
      run: |  # (17) Implanta a aplicação no Cloud Run usando a imagem Docker mais recente.
        gcloud run deploy rest-with-spring-boot-erudio \
          --image ${{ secrets.REGISTRY_INFO }}/rest-with-spring-boot-erudio:latest \
          --region us-central1 \
          --platform managed \
          --allow-unauthenticated
